---
title: "Data cleaning"
format: html
editor: visual
---

## Data cleaning  

### Load libraries for munging    

```{r}
library(data.table)
library(tidyverse)
```

### Import data  

```{r}
music <- fread("data/Music_and_Mental_Health_-_Survey.csv")
```

### Quick inspection   
```{r}
str(music)
```

Running the above command not only shows us the number of records and variables in the data, but we're also able to have a look at the variable names. We note that some column names do not follow R naming convention, they have special characters ([,],&) and spaces. We will need to fix that!

### Data cleaning  - variable names  

Let us begin by dropping all special characters ([,],&).
I can only see one & on the names (on the R&B), let's begin by replacing it with 'n'.I chose to start with that so that I have easy time replacing the [,] special characters with one command. 
```{r}

names(music)[names(music) %like% "&"] <- "Frequency_RnB" 

```
At the end, after renaming the variables, I'd like to have them in the format of: Frequency_RnB 


Next we will now drop the rest of the special characters and white spaces: [,]    
```{r}
#music <- music %>% rename_with(~str_remove(.x,'^\\d+\\. '))
colnames(music) <- str_replace_all(colnames(music),"[:punct:]|[:space:]","")
```

### Data cleaning - missing values   
get the rows which has missing values
```{r}
music[!complete.cases(music),]
```
The result of the above code returns a whole 107 rows with missing values.
There are two primary ways of dealing with missing values.
* Imputation with mean, median or mode.
* Drop either the rows or columns with missing values.

The approach to use really depends on your data, the type of data and where the missing values are occurring. 
For this case we can spot missing values in both numeric and categorical variables. First of all seeing that the records with missing values are quite a number which might significantly affect our data, I'll take approach one, imputation as opposed to dropping the records.
Secondly, given that the missing values occur in both categorical and numeric variables, I'll impute the numerical variables with the mean and the categorical ones with the mode.  

To achieve that, I'll have to confirm if the data types are correctly labelled, as in, numeric variables are labelled as such and the categorical ones respectively, after which we can now use functions for imputation. 

Some bit of data preparation before imputation  
```{r}
  # get the structure of our dataframe with the variable data types.
  str(music)

  # All the variables seem to be correctly labelled, we can now proceed with the imputation.
  # collect numeric variables. 
  col_dtypes <- lapply(music, class)

  # convert them to a dataframe
  col_dtypes_frame <- data.frame(unlist(col_dtypes))
  
  # the variables have been registered as rownames yet we want them as a column, we'll have to change that for ease of manipulation: filtering
   col_dtypes_frame <- col_dtypes_frame %>% rownames_to_column()
  
   # change the column names 
  names(col_dtypes_frame) <- c("col_names","col_datatype")
  
  # convert to data.table 
  col_datatype <- setDT(col_dtypes_frame)
  # collect numeric and integer columns
  num_vars <- col_datatype[col_datatype %in% c("numeric","integer"),.(col_names)]
  v <- num_vars$col_names
  # categorical variables
  cat_vars <- col_dtypes_frame[col_datatype=="character",.(col_names)]
  catvars <- cat_vars$col_names
```

##### Some necessary *digression*   
Its crucial to note that sometimes missing values are represented with -9999,-999,9999. This is an 'ancient' convention that sought to represent numeric vectors as numeric vectors seeing that a numeric field shouldn't/cannot store alphanumeric characters such as 'NA', some code has to be used and that's what brings about -999/-9999 representation. However, its important to note that the representation of missing values as -999/-9999 is not obvious as we can truly have a -999/-9999 value in a vector. And to single that out you might need to do further checks such as reading the data documentation or even enquiry with the dataset owners.   

Therefore, much as this is an earlier form of representing missing values, some softwares still use that convention and if you're not keen then your analyses can be quite messed up. Like for our case, a keen look through the BPM column we can spot such values and we need to fix that. 

Well, you might be wondering how this came to my attention, the answer to that is, after doing the imputation of missing numeric values with the mean of the respective column, I noticed quite some large numbers for the missing values under the BPM column and that raised my eyebrows, upon further investigation then I realized from the original dataset that there was one entry with a 999999 value which led to the rather huge average. I presumed that this could potentially be a representation of missing value.   

```{r}
music$BPM[music$BPM == 999999999] <- NA
```


#### Imputation  
For numeric variables - impute missing values with the mean
For categorical variables - replace with mode 

```{r}

music <- setDT(music)
# loop through the numeric columns and replace na values with mean of the same column in which the na appears.
for (coll in v){

 music <-  music[, (coll) := lapply(coll, function(x) {
    x <- get(x)
    x[is.na(x)] <- mean(x, na.rm = TRUE)
    x
  })]

}

# create custom function to get the mode of a column
my_mode <- function (x, na.rm) {
  xtab <- table(x)
  xmode <- names(which(xtab == max(xtab)))
  if (length(xmode) > 1) xmode <- ">1 mode"
  return(xmode)
}

# loop through the character columns and replace na/null values with mode of the same column in which the na/null appears.
for (cat_coll in catvars) {
  music <- as.data.frame(music)
  music[music[,cat_coll]=="",cat_coll] <- my_mode(music[,cat_coll], na.rm = TRUE)

}
```


## Handling outliers
An outlier is anything (person/thing) that differs with the other members, for our case, we're referring to data points which are situated away from the rest of the points. Outliers handling is an essential process in data preparation for the reason that they do affect outcome of analysis and modelling hence the need to handle them. 
There are different ways to handle outliers and the method really depends on the data you're dealing with, some of the approaches are:

* Removing outliers.   
* Replacing them with the mode.    
* Winsorization (replacing them with the maximum value).    

To be able to handle the outlier problem, you first of all need to find them, rather confirm if there are outliers in your dataset and to achieve this we have the below methods used to detect outliers:

* Boxplot   
* Histogram   
* Statistical tests : Grubbs’s test, Dixon’s test, Rosner’s test.  
* Hampel filters method   
* Grubbs test   

Plus other tests which I may not be aware of. 
Let's use a box plot for now but you can explore the other approaches if you wish.  
We'll first of all collect all numeric variables and then plot box plots for each.  

```{r}

```


We can now poke some questions on our dataset to help us get some insights to inform suggestions and solutions to the problems the survey seeks to answer. 

Questions 
1. Does listening to music while working improve mental health?
The variable *Whileworking* is categorical and so is the *Musiceffects*.

```{r}

mat <- music
mat <- mat[,c("Whileworking","Musiceffects")]
mat <- setDT(mat)[,.(count=.N),by=.(Whileworking,Musiceffects)]

# mat <- dcast(mat,Whileworking ~ Musiceffects, value.var = "count")
# mat <- mat %>% remove_rownames() %>% column_to_rownames(var = "Whileworking")
# mat <- as.matrix(mat)

```

To explore the data visually we can use a sankey diagram 

```{r}
library(networkD3)

# From these flows we need to create a node data frame: it lists every entities involved in the flow
nodes <- data.frame(
  name=c(as.character(mat$Whileworking), 
  as.character(mat$Musiceffects)) %>% unique()
)
 
# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.
mat$IDsource <- match(mat$Whileworking, nodes$name)-1 
mat$IDtarget <- match(mat$Musiceffects, nodes$name)-1
 
# Make the Network
p <- sankeyNetwork(Links = mat, Nodes = nodes,
              Source = "IDsource", Target = "IDtarget",
              Value = "count", NodeID = "name", 
              sinksRight=FALSE)
p

# add titles for the nodes
htmlwidgets::onRender(p, '
  function(el) { 
    var cols_x = this.sankey.nodes().map(d => d.x).filter((v, i, a) => a.indexOf(v) === i).sort(function(a, b){return a - b});
    var labels = ["Do you listen to music while working", "Music effects"];
    cols_x.forEach((d, i) => {
      d3.select(el).select("svg")
        .append("text")
        .attr("x", d)
        .attr("y", 12)
        .text(labels[i]);
    })
  }
')
```
Its interesting to note that most people listen to music while working. Further, we note that there's quite a significant comparison in terms of numbers of those who confessed to have had an improvement in their mental health as compared to those who responded with a no-effect and worsen. 
And so to our question, we can confidently say *YES*, listening to music while working seems to have an effect on mental health!

2. What's the primary streaming service for those who listen to music and how many hours on average does someone spend listening to music?

```{r}
str_service <- setDT(music)[,.(totals=.N), by=c("Primarystreamingservice")]
```

A bubble chart could be of help here
```{r}

library(plotly)
str_service %>%
plot_ly() %>%
        add_trace(x = ~reorder(Primarystreamingservice, totals), 
                  y = ~totals,
                  size = ~totals,
                  color = ~Primarystreamingservice,
                  alpha = 1,
                  #sizes = c(200,4000),
                  type = "scatter",
                  mode = "markers",
                  marker = list(symbol = 'circle', sizemode = 'diameter',
                                line = list(width = 2, color = '#FFFFFF'), opacity=1)) %>%
        add_text(x = ~reorder(Primarystreamingservice, -totals), 
                        y = ~Primarystreamingservice, text = ~totals,
                        showarrow = FALSE,
                        color = I("black")) %>%
        layout(
          showlegend = FALSE,
          title="What streaming service is mostly prefered?",
          xaxis = list(
            title = "Primary streaming service"
          ),
          yaxis = list(
            title = "Total number of respondents"
          )
        ) %>%
        config(displayModeBar = FALSE, displaylogo = FALSE, 
              scrollZoom = FALSE, showAxisDragHandles = TRUE, 
              showSendToCloud = FALSE)
```

The gap between the most preferred streaming service and the immediate one is huge, almost 4 times! 
It leaves us with the question why Spotify stands that tall. 

3. Has Age anything to with the streaming hours

```{r}
age_hours <- music[,c("Age","Hoursperday","Whileworking")]
```

Let's explore this using a scatter plot to see if there's any correlation

```{r}
library(ggplot2)

age_hours %>% 
  ggplot(aes(x = Age, y= Hoursperday, color = Whileworking)) +
  geom_jitter()
  
```

4. Which genre of music is best for improved mental health?  
Select the Favgenre and Musiceffects columns and visualize with a bar graph   

```{r}
favgenre_effects <- setDT(music)[,c(total_respondents=.N), by=c("Favgenre","Musiceffects")]
```

Music genres and their effect
```{r}
ggplot() +
  geom_bar(data=filter(favgenre_effects, Musiceffects == "Improve"),
           aes(x = reorder(Favgenre,V1),y = V1, fill = Musiceffects), stat="identity", position = 'stack') +
  geom_bar(data = filter(favgenre_effects, Musiceffects == "Worsen"),
           aes(x = Favgenre, y = -V1, fill = Musiceffects), stat = "identity", position = 'stack') +
  labs(y = "Total number of respondents", x = "Favourite music genre") +
  coord_flip() +
  geom_hline(yintercept = 0, linetype = "dashed") +
  scale_fill_manual(values = c("#bebada","#8dd3c7"))
  
  
```

Hours spent listening to music per day on average
```{r}
library(ggpubr)
library(cowplot)
hrs_effect <- music[,c("Hoursperday","Musiceffects")]

gghistogram(hrs_effect, x = "Hoursperday", add = "mean", rug = TRUE,fill = "Musiceffects",palette = c("#bebada","#ffffb3","#8dd3c7"))
```
Average hours spent listening to music per day with respect to the effects

```{r}
hrs_effect <- music[, .(avg_hrs = round(mean(Hoursperday),0)), by=.(Favgenre,Musiceffects)]
```

Genres and insomnia   
```{r}
genre_insomnia <- music[,.(avg_insomnia_rating = round(mean(Insomnia),0)), by = .(Favgenre)]   

ggplot(genre_insomnia,aes(x = reorder(Favgenre,-avg_insomnia_rating), y = avg_insomnia_rating)) +
  geom_col() 
```


```{r}
sankey_data <- music[,average_hours := round(mean(Hoursperday),2), by=.(Favgenre,Musiceffects)][,.(Favgenre,Musiceffects,Hoursperday,average_hours)]

sankey_hrs_range <- sankey_data[,hours_range := cut(average_hours, breaks = c(1,2,4,6,8,10,12,14,16,18,20,22,24))]
sankey_hrs_range$hours_range <- gsub("\\(","",sankey_hrs_range$hours_range)
sankey_hrs_range$hours_range <- gsub("\\]","",sankey_hrs_range$hours_range)
sankey_hrs_range$hours_range <- gsub(","," - ",sankey_hrs_range$hours_range)

sankey_order_hrs <- sankey_hrs_range[,order := floor(average_hours)][order(average_hours)]

order_hours <- sankey_order_hrs[unique(order)][,index := .I][,c("order","index")]


order_genre <- sankey_hrs_range %>%
  group_by(Favgenre) %>%
  summarise(avg_hrs = mean(Hoursperday)) %>%
  ungroup() %>%
  arrange(avg_hrs) %>%
  distinct(Favgenre) %>%
  mutate(index_ind = row_number())

order_effect <- sankey_hrs_range %>%
  mutate(Musiceffects = fct_relevel(Musiceffects, c("Improve", "No effect", "Worsen"))) %>%
  distinct(Musiceffects) %>%
  mutate(index_edu = as.numeric(Musiceffects))

sankey_hrs_range <- sankey_hrs_range %>%
  left_join(order_hours) %>%
  left_join(order_genre) %>%
  left_join(order_effect)

salary_industry <- salary_range %>%
  mutate(group = glue("{industry}-{salary}")) %>%
  mutate(group2 = glue("{education}-{salary}"))

```

```{r}

 library(plotly)

fig <- plot_ly(
    type = "sankey",
    orientation = "h",

    node = list(
      label = c("A1", "A2", "B1", "B2", "C1", "C2"),
      color = c("blue", "blue", "blue", "blue", "blue", "blue"),
      pad = 15,
      thickness = 20,
      line = list(
        color = "black",
        width = 0.5
      )
    ),

    link = list(
      source = c(0,1,0,2,3,3),
      target = c(2,3,3,4,4,5),
      value =  c(8,4,2,8,4,2)
    )
  )
fig <- fig %>% layout(
    title = "Basic Sankey Diagram",
    font = list(
      size = 10
    )
)

fig



```

